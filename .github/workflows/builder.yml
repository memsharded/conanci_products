name: Builder

on:
  workflow_call:
    secrets:
      USERDEVELOP:
        required: true
      TOKENDEVELOP:
        required: true
      USERPRODUCTS:
        required: true
      TOKENPRODUCTS:
        required: true
    inputs:
      matrix:
        required: true
        type: string

jobs:
  builder:
    name: ${{ fromJSON(inputs.matrix).config }}
    runs-on: ${{ fromJSON(inputs.matrix).config }}
    steps:
      - name: Print
        run: echo "${{ toJSON(fromJSON(inputs.matrix).package) }}"
      - name: Configure
        run: |
          python3 -m pip install conan
          conan config install https://github.com/memsharded/conanci_conf.git
          conan profile detect
          conan remote enable products
          conan remote login products "${{ secrets.USERPRODUCTS }}" -p "${{ secrets.TOKENPRODUCTS }}"
          conan remote enable develop
          conan remote login develop "${{ secrets.USERDEVELOP }}" -p "${{ secrets.TOKENDEVELOP }}"
      - name: Building Windows
        if: runner.os == 'Windows' && contains(toJSON(fromJSON(inputs.matrix).package.packages[0][0].filenames), 'windows') 
        run: conan install ${{fromJSON(inputs.matrix).package.packages[0][0].build_args}} -pr=windows --format=json > graph.json
      - name: Building Windows
        if: runner.os == 'Windows' && contains(toJSON(fromJSON(inputs.matrix).package.packages[0][1].filenames), 'windows')
        run: conan install ${{fromJSON(inputs.matrix).package.packages[0][1].build_args}} -pr=windows --format=json > graph.json
      - name: Building linux
        if: runner.os == 'Linux' && contains(toJSON(fromJSON(inputs.matrix).package.packages[0][0].filenames), 'linux')
        run: conan install ${{fromJSON(inputs.matrix).package.packages[0][0].build_args}} -pr=linux --format=json > graph.json
      - name: Building linux
        if: runner.os == 'Linux' && contains(toJSON(fromJSON(inputs.matrix).package.packages[0][1].filenames), 'linux')
        run: conan install ${{fromJSON(inputs.matrix).package.packages[0][1].build_args}} -pr=linux --format=json > graph.json
      - name: Upload
        if: ${{ hashFiles('graph.json') != '' }}
        run: |
          conan list --graph=graph.json --graph-binaries=build --format=json > built.json
          conan upload -l="built.json" -r=products --confirm
