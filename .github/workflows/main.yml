name: Main Workflow
on:
  push:
    branches:
      - main

jobs:
  compute_build_order:
    name: Compute build order
    runs-on: ubuntu-24.04
    outputs:
      build_order: ${{ steps.create.outputs.build_order }}
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v4
    #   - id: create
    #     name: Create build-order
    #     run: echo "build_order=$(jq -c . < ./build_order.json)" >> "$GITHUB_OUTPUT"
    steps:
      - name: Configure
        run: |
          apt-get update && apt-get install -y python3 python3-pip
          python3 -m pip install conan
          conan config install https://github.com/memsharded/conanci_conf.git
          conan profile detect
          conan remote enable products
          conan remote login products "${{ secrets.USERPRODUCTS }}" -p "${{ secrets.TOKENPRODUCTS }}"
          conan remote enable develop
          conan remote login develop "${{ secrets.USERDEVELOP }}" -p "${{ secrets.TOKENDEVELOP }}"
      - name: Create lockfile
        run: |
          conan lock create --requires=game/1.0 -pr=windows --lockfile-out=conan.lock
          conan lock create --requires=game/1.0 -pr=linux --lockfile=conan.lock --lockfile-out=conan.lock
          conan lock create --requires=mapviewer/1.0 -pr=windows --lockfile=conan.lock --lockfile-out=conan.lock
          conan lock create --requires=mapviewer/1.0 -pr=linux --lockfile=conan.lock --lockfile-out=conan.lock
      - name: Compute build order
        run: | 
          conan graph build-order --requires=game/1.0 --lockfile=conan.lock --build="missing" -pr=windows --order-by=recipe --format=json > game_windows.json
          conan graph build-order --requires=game/1.0 --lockfile=conan.lock --build="missing" -pr=linux --order-by=recipe --format=json > game_linux.json
          conan graph build-order --requires=mapviewer/1.0 --lockfile=conan.lock --build="missing" -pr=windows --order-by=recipe --format=json > mapviewer_windows.json
          conan graph build-order --requires=mapviewer/1.0 --lockfile=conan.lock --build="missing" -pr=linux --order-by=recipe --format=json > mapviewer_linux.json
          conan graph build-order-merge --file=game_windows.json --file=game_linux.json --file=mapviewer_windows.json --file=mapviewer_linux.json --reduce --format=json > build_order.json
      - id: create
        name: Create build-order
        run: echo "build_order=$(jq -c . < ./build_order.json)" >> "$GITHUB_OUTPUT"
  
  level0:
    if: fromJSON(needs.compute_build_order.outputs.build_order).order[0]
    needs: [compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order).order[0] }}
        config: [windows-2022, ubuntu-24.04]
    uses: ./.github/workflows/builder.yml
    with:
      matrix: ${{ toJSON(matrix) }}
    # runs-on: ${{ matrix.config }}
    # steps:
    #   - name: Print
    #     run: echo "${{ toJSON(matrix.package) }}"
    #   - name: Configure
    #     run: |
    #       python3 -m pip install conan
    #       conan config install https://github.com/memsharded/conanci_conf.git
    #       conan profile detect
    #       conan remote enable products
    #       conan remote login products "${{ secrets.USERPRODUCTS }}" -p "${{ secrets.TOKENPRODUCTS }}"
    #       conan remote enable develop
    #       conan remote login develop "${{ secrets.USERDEVELOP }}" -p "${{ secrets.TOKENDEVELOP }}"
    #   - name: Building Windows
    #     if: runner.os == 'Windows' && matrix.package.packages[0][0].binary == 'Build' && contains(toJSON(matrix.package.packages[0][0].filenames), 'windows') 
    #     run: conan install ${{matrix.package.packages[0][0].build_args}} -pr=windows --format=json > graph.json
    #   - name: Building Windows
    #     if: runner.os == 'Windows' && matrix.package.packages[0][1].binary == 'Build' && contains(toJSON(matrix.package.packages[0][1].filenames), 'windows')
    #     run: conan install ${{matrix.package.packages[0][1].build_args}} -pr=windows --format=json > graph.json
    #   - name: Building linux
    #     if: runner.os == 'Linux' && matrix.package.packages[0][0].binary == 'Build' && contains(toJSON(matrix.package.packages[0][0].filenames), 'linux')
    #     run: conan install ${{matrix.package.packages[0][0].build_args}} -pr=linux --format=json > graph.json
    #   - name: Building linux
    #     if: runner.os == 'Linux' && matrix.package.packages[0][1].binary == 'Build' && contains(toJSON(matrix.package.packages[0][1].filenames), 'linux')
    #     run: conan install ${{matrix.package.packages[0][1].build_args}} -pr=linux --format=json > graph.json
    #   - name: Upload
    #     if: ${{ hashFiles('graph.json') != '' }}
    #     run: |
    #       conan list --graph=graph.json --graph-binaries=build --format=json > built.json
    #       conan upload -l="built.json" -r=products --confirm

  level1:
    if: fromJSON(needs.compute_build_order.outputs.build_order).order[1]
    needs: [level0, compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order).order[1] }}
        config: [windows-2022, ubuntu-24.04]
    runs-on: ${{ matrix.config }}
    steps:
      - name: Print
        run: echo "${{ toJSON(matrix.package) }}"
      - name: Configure
        run: |
          python3 -m pip install conan
          conan config install https://github.com/memsharded/conanci_conf.git
          conan profile detect
          conan remote enable products
          conan remote login products "${{ secrets.USERPRODUCTS }}" -p "${{ secrets.TOKENPRODUCTS }}"
          conan remote enable develop
          conan remote login develop "${{ secrets.USERDEVELOP }}" -p "${{ secrets.TOKENDEVELOP }}"
      - name: Building Windows
        if: runner.os == 'Windows' && matrix.package.packages[0][0].binary == 'Build' && contains(toJSON(matrix.package.packages[0][0].filenames), 'windows') 
        run: conan install ${{matrix.package.packages[0][0].build_args}} -pr=windows --format=json > graph.json
      - name: Building Windows
        if: runner.os == 'Windows' && matrix.package.packages[0][1].binary == 'Build' && contains(toJSON(matrix.package.packages[0][1].filenames), 'windows')
        run: conan install ${{matrix.package.packages[0][1].build_args}} -pr=windows --format=json > graph.json
      - name: Building linux
        if: runner.os == 'Linux' && matrix.package.packages[0][0].binary == 'Build' && contains(toJSON(matrix.package.packages[0][0].filenames), 'linux')
        run: conan install ${{matrix.package.packages[0][0].build_args}} -pr=linux --format=json > graph.json
      - name: Building linux
        if: runner.os == 'Linux' && matrix.package.packages[0][1].binary == 'Build' && contains(toJSON(matrix.package.packages[0][1].filenames), 'linux')
        run: conan install ${{matrix.package.packages[0][1].build_args}} -pr=linux --format=json > graph.json
      - name: Upload
        if: ${{ hashFiles('graph.json') != '' }}
        run: |
          conan list --graph=graph.json --graph-binaries=build --format=json > built.json
          conan upload -l="built.json" -r=products --confirm

  level2:
    if: fromJSON(needs.compute_build_order.outputs.build_order).order[2]
    needs: [level1, compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order).order[2] }}
        config: [windows-2022, ubuntu-24.04]
    runs-on: ${{ matrix.config }}
    steps:
      - name: Print
        run: echo "${{ toJSON(matrix.package) }}"
      - name: Configure
        run: |
          python3 -m pip install conan
          conan config install https://github.com/memsharded/conanci_conf.git
          conan profile detect
          conan remote enable products
          conan remote login products "${{ secrets.USERPRODUCTS }}" -p "${{ secrets.TOKENPRODUCTS }}"
          conan remote enable develop
          conan remote login develop "${{ secrets.USERDEVELOP }}" -p "${{ secrets.TOKENDEVELOP }}"
      - name: Building Windows
        if: runner.os == 'Windows' && matrix.package.packages[0][0].binary == 'Build' && contains(toJSON(matrix.package.packages[0][0].filenames), 'windows') 
        run: conan install ${{matrix.package.packages[0][0].build_args}} -pr=windows --format=json > graph.json
      - name: Building Windows
        if: runner.os == 'Windows' && matrix.package.packages[0][1].binary == 'Build' && contains(toJSON(matrix.package.packages[0][1].filenames), 'windows')
        run: conan install ${{matrix.package.packages[0][1].build_args}} -pr=windows --format=json > graph.json
      - name: Building linux
        if: runner.os == 'Linux' && matrix.package.packages[0][0].binary == 'Build' && contains(toJSON(matrix.package.packages[0][0].filenames), 'linux')
        run: conan install ${{matrix.package.packages[0][0].build_args}} -pr=linux --format=json > graph.json
      - name: Building linux
        if: runner.os == 'Linux' && matrix.package.packages[0][1].binary == 'Build' && contains(toJSON(matrix.package.packages[0][1].filenames), 'linux')
        run: conan install ${{matrix.package.packages[0][1].build_args}} -pr=linux --format=json > graph.json
      - name: Upload
        if: ${{ hashFiles('graph.json') != '' }}
        run: |
          conan list --graph=graph.json --graph-binaries=build --format=json > built.json
          conan upload -l="built.json" -r=products --confirm
  
  level3:
    if: fromJSON(needs.compute_build_order.outputs.build_order).order[3]
    needs: [level2, compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order).order[3] }}
        config: [windows-2022, ubuntu-24.04]
    runs-on: ${{ matrix.config }}
    steps:
      - name: Print
        run: echo "${{ toJSON(matrix.package) }}"
      - name: Configure
        run: |
          python3 -m pip install conan
          conan config install https://github.com/memsharded/conanci_conf.git
          conan profile detect
          conan remote enable products
          conan remote login products "${{ secrets.USERPRODUCTS }}" -p "${{ secrets.TOKENPRODUCTS }}"
          conan remote enable develop
          conan remote login develop "${{ secrets.USERDEVELOP }}" -p "${{ secrets.TOKENDEVELOP }}"
      - name: Building Windows
        if: runner.os == 'Windows' && matrix.package.packages[0][0].binary == 'Build' && contains(toJSON(matrix.package.packages[0][0].filenames), 'windows') 
        run: conan install ${{matrix.package.packages[0][0].build_args}} -pr=windows --format=json > graph.json
      - name: Building Windows
        if: runner.os == 'Windows' && matrix.package.packages[0][1].binary == 'Build' && contains(toJSON(matrix.package.packages[0][1].filenames), 'windows')
        run: conan install ${{matrix.package.packages[0][1].build_args}} -pr=windows --format=json > graph.json
      - name: Building linux
        if: runner.os == 'Linux' && matrix.package.packages[0][0].binary == 'Build' && contains(toJSON(matrix.package.packages[0][0].filenames), 'linux')
        run: conan install ${{matrix.package.packages[0][0].build_args}} -pr=linux --format=json > graph.json
      - name: Building linux
        if: runner.os == 'Linux' && matrix.package.packages[0][1].binary == 'Build' && contains(toJSON(matrix.package.packages[0][1].filenames), 'linux')
        run: conan install ${{matrix.package.packages[0][1].build_args}} -pr=linux --format=json > graph.json
      - name: Upload
        if: ${{ hashFiles('graph.json') != '' }}
        run: |
          conan list --graph=graph.json --graph-binaries=build --format=json > built.json
          conan upload -l="built.json" -r=products --confirm
