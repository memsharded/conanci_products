name: Main Workflow
on:
  push:
    branches:
      - main

jobs:
  compute_build_order:
    name: Compute build order
    runs-on: ubuntu-24.04
    outputs:
      build_order: ${{ steps.create.outputs.build_order }}
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v4
    #   - id: create
    #     name: Create build-order
    #     run: echo "build_order=$(jq -c . < ./build_order.json)" >> "$GITHUB_OUTPUT"
    steps:
      - name: Configure
        run: |
          apt-get update && apt-get install -y python3 python3-pip
          python3 -m pip install conan
          conan config install https://github.com/memsharded/conanci_conf.git
          conan profile detect
          conan remote enable products
          conan remote login products "${{ secrets.USERPRODUCTS }}" -p "${{ secrets.TOKENPRODUCTS }}"
          conan remote enable develop
          conan remote login develop "${{ secrets.USERDEVELOP }}" -p "${{ secrets.TOKENDEVELOP }}"
      - name: Create lockfile
        run: |
          conan lock create --requires=game/1.0 -pr=windows --lockfile-out=conan.lock
          conan lock create --requires=game/1.0 -pr=linux --lockfile=conan.lock --lockfile-out=conan.lock
          conan lock create --requires=mapviewer/1.0 -pr=windows --lockfile=conan.lock --lockfile-out=conan.lock
          conan lock create --requires=mapviewer/1.0 -pr=linux --lockfile=conan.lock --lockfile-out=conan.lock
      - name: Compute build order
        run: | 
          conan graph build-order --requires=game/1.0 --lockfile=conan.lock --build="missing" -pr=windows --order-by=recipe --format=json > game_windows.json
          conan graph build-order --requires=game/1.0 --lockfile=conan.lock --build="missing" -pr=linux --order-by=recipe --format=json > game_linux.json
          conan graph build-order --requires=mapviewer/1.0 --lockfile=conan.lock --build="missing" -pr=windows --order-by=recipe --format=json > mapviewer_windows.json
          conan graph build-order --requires=mapviewer/1.0 --lockfile=conan.lock --build="missing" -pr=linux --order-by=recipe --format=json > mapviewer_linux.json
          conan graph build-order-merge --file=game_windows.json --file=game_linux.json --file=mapviewer_windows.json --file=mapviewer_linux.json --reduce --format=json > build_order.json
      - id: create
        name: Create build-order
        run: echo "build_order=$(jq -c . < ./build_order.json)" >> "$GITHUB_OUTPUT"
  
  level0:
    if: fromJSON(needs.compute_build_order.outputs.build_order).order[0]
    needs: [compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order).order[0] }}
        config: [windows-2022, ubuntu-24.04]
    uses: ./.github/workflows/builder.yml
    with:
      matrix: ${{ toJSON(matrix) }}
    secrets:
      USERDEVELOP: ${{ secrets.USERDEVELOP }}
      TOKENDEVELOP: ${{ secrets.TOKENDEVELOP }}
      USERPRODUCTS: ${{ secrets.USERPRODUCTS}}
      TOKENPRODUCTS: ${{ secrets.TOKENPRODUCTS }}

  level1:
    if: fromJSON(needs.compute_build_order.outputs.build_order).order[1]
    needs: [level0, compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order).order[1] }}
        config: [windows-2022, ubuntu-24.04]
    uses: ./.github/workflows/builder.yml
    with:
      matrix: ${{ toJSON(matrix) }}
    secrets:
      USERDEVELOP: ${{ secrets.USERDEVELOP }}
      TOKENDEVELOP: ${{ secrets.TOKENDEVELOP }}
      USERPRODUCTS: ${{ secrets.USERPRODUCTS}}
      TOKENPRODUCTS: ${{ secrets.TOKENPRODUCTS }}

  level2:
    if: fromJSON(needs.compute_build_order.outputs.build_order).order[2]
    needs: [level1, compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order).order[2] }}
        config: [windows-2022, ubuntu-24.04]
    uses: ./.github/workflows/builder.yml
    with:
      matrix: ${{ toJSON(matrix) }}
    secrets:
      USERDEVELOP: ${{ secrets.USERDEVELOP }}
      TOKENDEVELOP: ${{ secrets.TOKENDEVELOP }}
      USERPRODUCTS: ${{ secrets.USERPRODUCTS}}
      TOKENPRODUCTS: ${{ secrets.TOKENPRODUCTS }}
  
  level3:
    if: fromJSON(needs.compute_build_order.outputs.build_order).order[3]
    needs: [level2, compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order).order[3] }}
        config: [windows-2022, ubuntu-24.04]
    uses: ./.github/workflows/builder.yml
    with:
      matrix: ${{ toJSON(matrix) }}
    secrets:
      USERDEVELOP: ${{ secrets.USERDEVELOP }}
      TOKENDEVELOP: ${{ secrets.TOKENDEVELOP }}
      USERPRODUCTS: ${{ secrets.USERPRODUCTS}}
      TOKENPRODUCTS: ${{ secrets.TOKENPRODUCTS }}


  promotion:
    runs-on: ubuntu-24.04
    needs: [level3]
    if: ${{ always() && ! failure() && ! cancelled() }}
    steps:
      - name: Configure environment and install Conan release
        run: |
          apt-get update && apt-get install -y python3 python3-pip
          python3 -m pip install conan
          conan config install https://github.com/memsharded/conanci_conf.git
      - name: Configure repos
        run: |
          conan remote enable develop
          conan remote login develop "${{ secrets.USERDEVELOP }}" -p "${{ secrets.TOKENDEVELOP }}"
          conan remote enable products
          conan remote login products "${{ secrets.USERPRODUCTS }}" -p "${{ secrets.TOKENPRODUCTS }}"
      - name: promote packages
        run: |
          conan download "*" -r=products --format=json > promote.json
          conan upload --list=promote.json -r=develop -c
