name: Main Workflow
on:
  push:
    branches:
      - main

jobs:
  # compute_build_order:
  #   name: Compute build order
  #   runs-on: ubuntu-24.04
  #   outputs:
  #     build_order: ${{ steps.create.outputs.build_order }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: get properties
  #       id: json_properties
  #       uses: ActionsTools/read-json-action@main
  #       with:
  #         file_path: "build_order.json" 
  #     - id: create
  #       name: Create build-order
  #       run: echo "build_order=${{toJSON(steps.json_properties.outputs.order)}}" >> "$GITHUB_OUTPUT" 

  compute_build_order:
    name: Compute build order
    runs-on: ubuntu-24.04
    steps:
      - name: Configure
        run: |
          apt-get update && apt-get install -y python3 python3-pip
          python3 -m pip install conan
          conan config install https://github.com/memsharded/conanci_conf.git
          conan profile detect
          conan remote enable products
          conan remote login products "${{ secrets.USERPRODUCTS }}" -p "${{ secrets.TOKENPRODUCTS }}"
          conan remote enable develop
          conan remote login develop "${{ secrets.USERDEVELOP }}" -p "${{ secrets.TOKENDEVELOP }}"
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create lockfile
        run: |
          conan lock create --requires=game/1.0 -pr=windows --lockfile-out=conan.lock
          conan lock create --requires=game/1.0 -pr=linux --lockfile=conan.lock --lockfile-out=conan.lock

      - name: Compute build order
        run: | 
          conan graph build-order --requires=game/1.0 --lockfile=conan.lock --build="*" -pr=windows --order-by=recipe --format=json > game_windows.json
          conan graph build-order --requires=game/1.0 --lockfile=conan.lock --build="*" -pr=linux --order-by=recipe --format=json > game_linux.json

          conan graph build-order-merge --file=game_windows.json --file=game_linux.json --reduce --format=json > build_order.json
      - name: get properties
        id: json_properties
        uses: ActionsTools/read-json-action@main
        with:
          file_path: "build_order.json" 
      - id: create
        name: Create build-order
        env:
          JSON: ${{toJSON(steps.json_properties.outputs.order)}}
        run: |
          echo "JSON=${{toJSON(steps.json_properties.outputs.order)}}"
          echo "build_order=$JSON" >> "$GITHUB_OUTPUT"
  
  basic_print:
    needs: [compute_build_order]
    runs-on: ubuntu-24.04
    steps:
      - name: Print
        run: |
          echo "${{needs.compute_build_order.outputs.build_order}}"
  
  level0:
    if: fromJSON(needs.compute_build_order.outputs.build_order)[0]
    needs: [compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order)[0] }}
        config: [windows-2022, ubuntu-24.04]
    runs-on: ${{ matrix.config }}
    steps:
      - name: Printing Windows
        if: matrix.config == 'windows-2022' && contains(matrix.package.packages[0][0].filenames, 'game_windows')
        run: echo "conan install ${{matrix.package.packages[0][0].build_args}} -pr=windows"
      - name: Printing Windows
        if: matrix.config == 'windows-2022' && contains(matrix.package.packages[0][1].filenames, 'game_windows')
        run: echo "conan install ${{matrix.package.packages[0][1].build_args}} -pr=windows"
      - name: Printing linux
        if: matrix.config == 'ubuntu-24.04' && contains(matrix.package.packages[0][0].filenames, 'game_linux')
        run: echo "conan install ${{matrix.package.packages[0][0].build_args}} -pr=linux"
      - name: Printing linux
        if: matrix.config == 'ubuntu-24.04' && contains(matrix.package.packages[0][1].filenames, 'game_linux')
        run: echo "conan install ${{matrix.package.packages[0][1].build_args}} -pr=linux"

  level1:
    if: fromJSON(needs.compute_build_order.outputs.build_order)[1]
    needs: [level0, compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order)[1] }}
        config: [windows-2022, ubuntu-24.04]
    runs-on: ${{ matrix.config }}
    steps:
      - name: Printing Windows
        if: matrix.config == 'windows-2022' && contains(matrix.package.packages[0][0].filenames, 'game_windows')
        run: echo "conan install ${{matrix.package.packages[0][0].build_args}} -pr=windows"
      - name: Printing Windows
        if: matrix.config == 'windows-2022' && contains(matrix.package.packages[0][1].filenames, 'game_windows')
        run: echo "conan install ${{matrix.package.packages[0][1].build_args}} -pr=windows"
      - name: Printing linux
        if: matrix.config == 'ubuntu-24.04' && contains(matrix.package.packages[0][0].filenames, 'bo_nix')
        run: echo "conan install ${{matrix.package.packages[0][0].build_args}} -pr=linux"
      - name: Printing linux
        if: matrix.config == 'ubuntu-24.04' && contains(matrix.package.packages[0][1].filenames, 'bo_nix')
        run: echo "conan install ${{matrix.package.packages[0][1].build_args}} -pr=linux"

  level2:
    if: fromJSON(needs.compute_build_order.outputs.build_order)[2]
    needs: [level1, compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order)[2] }}
        config: [windows-2022, ubuntu-24.04]
    runs-on: ${{ matrix.config }}
    steps:
      - name: Printing Windows
        if: matrix.config == 'windows-2022' && contains(matrix.package.packages[0][0].filenames, 'game_windows')
        run: echo "conan install ${{matrix.package.packages[0][0].build_args}} -pr=windows"
      - name: Printing Windows
        if: matrix.config == 'windows-2022' && contains(matrix.package.packages[0][1].filenames, 'game_windows')
        run: echo "conan install ${{matrix.package.packages[0][1].build_args}} -pr=windows"
      - name: Printing linux
        if: matrix.config == 'ubuntu-24.04' && contains(matrix.package.packages[0][0].filenames, 'game_linux')
        run: echo "conan install ${{matrix.package.packages[0][0].build_args}} -pr=linux"
      - name: Printing linux
        if: matrix.config == 'ubuntu-24.04' && contains(matrix.package.packages[0][1].filenames, 'game_linux')
        run: echo "conan install ${{matrix.package.packages[0][1].build_args}} -pr=linux"

  level3:
    if: fromJSON(needs.compute_build_order.outputs.build_order)[3]
    needs: [level2, compute_build_order]
    strategy:
      matrix:
        package: ${{ fromJSON(needs.compute_build_order.outputs.build_order)[3] }}
        config: [windows-2022, ubuntu-24.04]
    runs-on: ${{ matrix.config }}
    steps:
      - name: Printing Windows
        if: matrix.config == 'windows-2022' && contains(matrix.package.packages[0][0].filenames, 'game_windows')
        run: echo "conan install ${{matrix.package.packages[0][0].build_args}} -pr=windows"
      - name: Printing Windows
        if: matrix.config == 'windows-2022' && contains(matrix.package.packages[0][1].filenames, 'game_windows')
        run: echo "conan install ${{matrix.package.packages[0][1].build_args}} -pr=windows"
      - name: Printing linux
        if: matrix.config == 'ubuntu-24.04' && contains(matrix.package.packages[0][0].filenames, 'game_linux')
        run: echo "conan install ${{matrix.package.packages[0][0].build_args}} -pr=linux"
      - name: Printing linux
        if: matrix.config == 'ubuntu-24.04' && contains(matrix.package.packages[0][1].filenames, 'game_linux')
        run: echo "conan install ${{matrix.package.packages[0][1].build_args}} -pr=linux"
 